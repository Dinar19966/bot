import Parser from 'rss-parser';
import OpenAI from 'openai';
import TelegramBot from 'node-telegram-bot-api';
import 'dotenv/config';
import { RU_SOURCES } from './libs/const/ruNews';


const parser = new Parser();

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY!,
  baseURL: 'https://openrouter.ai/api/v1',
  defaultHeaders: {
    'HTTP-Referer': 'https://github.com/Dinar19966',
    'X-Title': 'NewsBot Pro',
  },
});

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
const CHAT_ID = process.env.TELEGRAM_CHAT_ID!;

type NewsItem = {
  title: string;
  link: string;
  source: string;
  pubDate: string;
};

// ‚è≥ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤—á–µ—Ä–∞
function getYesterdayDate(): string {
  const d = new Date();
  d.setDate(d.getDate() -1 );
  return d.toISOString().split('T')[0];
}

// üì• –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—á–µ—Ä–∞—à–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
async function fetchYesterdayNews(): Promise<NewsItem[]> {
  const yesterday = getYesterdayDate();
  const allNews: NewsItem[] = [];

  for (const source of RU_SOURCES) {
    if (!source.rss) continue;
    try {
      const feed = await parser.parseURL(source.rss);
      const filtered = (feed.items || []).filter(item => {
        const pubDate = item.isoDate || item.pubDate;
        if (!pubDate) return false;
        return pubDate.startsWith(yesterday);
      }).map(item => ({
        title: item.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        link: item.link ?? '#',
        source: source.name,
        pubDate: item.isoDate || item.pubDate || '',
      }));
      allNews.push(...filtered);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å ${source.name}:`, err);
    }
  }

  return allNews;
}

// üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏
async function generateDailyAnalyticalDigest(newsItems: NewsItem[]): Promise<string> {
  if (!newsItems.length) return '‚ö†Ô∏è –ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.';

  const date = getYesterdayDate().split('-').reverse().join('.');
  const newsList = newsItems.map((item, idx) =>
    `${idx + 1}. [${item.source}] ${item.title} (${item.link})`
  ).join('\n');
  

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä. –°–æ—Å—Ç–∞–≤—å *–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É* –∫–ª—é—á–µ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ ${date}. –ë–µ—Ä–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥—É—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
–§–æ—Ä–º–∞—Ç:
üìÖ *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ ${date}:*

- [–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–∫–µ—Ä–æ–≤(–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) ] (–∏—Å—Ç–æ—á–Ω–∏–∫)
- ...

–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É, —ç–∫–æ–Ω–æ–º–∏–∫—É, –æ–±—â–µ—Å—Ç–≤–æ.
          `.trim()
        },
        {
          role: 'user',
          content: `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n${newsList}`
        }
      ],
      temperature: 0.7,
      max_tokens: 5000
    });

    return response.choices[0]?.message?.content || '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É.';
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏:', err);
    return '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏.';
  }
}

// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendToTelegram(message: string) {
  try {
    await bot.sendMessage(CHAT_ID, message, {
      parse_mode: 'Markdown',
      disable_web_page_preview: false,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err);
  }
}

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async function runDailyDigestBot() {
  try {
    console.log('üì° –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π...');
    const news = await fetchYesterdayNews();

    console.log('üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏...');
    const digest = await generateDailyAnalyticalDigest(news);

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...');
    await sendToTelegram(digest);

    console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–æ–ª-–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π:', news.length);
  } catch (err) {
    console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    await sendToTelegram('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏.');
  }
}

runDailyDigestBot();
